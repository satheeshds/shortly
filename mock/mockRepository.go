// Code generated by MockGen. DO NOT EDIT.
// Source: ../interfaces/shortnerRepositoryInterface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIShortnerRepository is a mock of IShortnerRepository interface.
type MockIShortnerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIShortnerRepositoryMockRecorder
}

// MockIShortnerRepositoryMockRecorder is the mock recorder for MockIShortnerRepository.
type MockIShortnerRepositoryMockRecorder struct {
	mock *MockIShortnerRepository
}

// NewMockIShortnerRepository creates a new mock instance.
func NewMockIShortnerRepository(ctrl *gomock.Controller) *MockIShortnerRepository {
	mock := &MockIShortnerRepository{ctrl: ctrl}
	mock.recorder = &MockIShortnerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIShortnerRepository) EXPECT() *MockIShortnerRepositoryMockRecorder {
	return m.recorder
}

// AddDomain mocks base method.
func (m *MockIShortnerRepository) AddDomain(domain string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDomain", domain)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDomain indicates an expected call of AddDomain.
func (mr *MockIShortnerRepositoryMockRecorder) AddDomain(domain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDomain", reflect.TypeOf((*MockIShortnerRepository)(nil).AddDomain), domain)
}

// Get mocks base method.
func (m *MockIShortnerRepository) Get(shortUrl string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", shortUrl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIShortnerRepositoryMockRecorder) Get(shortUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIShortnerRepository)(nil).Get), shortUrl)
}

// GetPreviousShortenedIfExist mocks base method.
func (m *MockIShortnerRepository) GetPreviousShortenedIfExist(original string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreviousShortenedIfExist", original)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreviousShortenedIfExist indicates an expected call of GetPreviousShortenedIfExist.
func (mr *MockIShortnerRepositoryMockRecorder) GetPreviousShortenedIfExist(original interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreviousShortenedIfExist", reflect.TypeOf((*MockIShortnerRepository)(nil).GetPreviousShortenedIfExist), original)
}

// GetTopShortedDomains mocks base method.
func (m *MockIShortnerRepository) GetTopShortedDomains() (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopShortedDomains")
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopShortedDomains indicates an expected call of GetTopShortedDomains.
func (mr *MockIShortnerRepositoryMockRecorder) GetTopShortedDomains() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopShortedDomains", reflect.TypeOf((*MockIShortnerRepository)(nil).GetTopShortedDomains))
}

// Store mocks base method.
func (m *MockIShortnerRepository) Store(shortUrl, original string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", shortUrl, original)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockIShortnerRepositoryMockRecorder) Store(shortUrl, original interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockIShortnerRepository)(nil).Store), shortUrl, original)
}
